
<style>
    .path-btn {
        border: solid red 2px;
    }
    
    .path-btn:hover {
        background-color: red;
    }
    
    .path-btn-selected {
        background-color: red;
    }
    
</style>

<div>
    <div>
        @ValueSelected
    </div>
    <div class="" style="display: flex; gap: 20px;">
        <div class="rounded-3 path-btn @(ValueSelected >= 0 ? "path-btn-selected" : "")" style="width: 50px; height: 50px;" @onclick="@(() => PathClicked(0))"></div>
        <div class="rounded-3 path-btn @(ValueSelected >= 1 ? "path-btn-selected" : "")" style="width: 50px; height: 50px;" @onclick="@(() => PathClicked(1))"></div>
        <div class="rounded-3 path-btn @(ValueSelected >= 2 ? "path-btn-selected" : "")" style="width: 50px; height: 50px;" @onclick="@(() => PathClicked(2))"></div>
        <div class="rounded-3 path-btn @(ValueSelected >= 3 ? "path-btn-selected" : "")" style="width: 50px; height: 50px;" @onclick="@(() => PathClicked(3))"></div>
        <div class="rounded-3 path-btn @(ValueSelected >= 4 ? "path-btn-selected" : "")" style="width: 50px; height: 50px;" @onclick="@(() => PathClicked(4))"></div>
    </div>
</div>


@code {

    [Parameter]
    public int ValueSelected { get; set; }
    
    [Parameter]
    public EventCallback<int> ValueSelectedChanged { get; set; }

    
    public async Task PathClicked(int value)
    {
        ValueSelected = value;
        await ValueSelectedChanged.InvokeAsync(ValueSelected);
    }

}