@using BtdStats.Data.Models
@* 
TODO: update modal id
TODO: update the data target on the modal trigger link 
*@
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content ">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Tower Upgrade â€“ @UpgradeKey</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnModalClose"></button>
            </div>
            <div class="modal-body pb-4">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col d-flex flex-column align-items-center">
                            <img src="https://statsnite.com/images/btd/towers/@TowerId/@(UpgradeKey).png" loading="lazy" style="width: 300px;" class="align-self-center">
                            <div class="cost-frame mt-4">
                                <img class="money-img" src="img/Money_icon.webp" alt="money icon"/>
                                <div style="width: 53px; height: 45px; color: #343A40; font-size: 32px; font-family: Luckiest Guy; font-weight: 400;">@Upgrade.Cost.SelectCost(DifficultySelected)</div>
                            </div>
                        </div>
                        <div class="col">
                            <h2>@Upgrade.Name</h2>
                            <h4 class="fw-light">@Upgrade.Description</h4>
                            <hr/>
                            <h5 class="mt-3">Effects</h5>
                            <ul>
                                @foreach (var effect in Upgrade.Effects)
                                {
                                    <li class="lead">@effect</li>
                                }

                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public PathUpgrade Upgrade { get; set; }

    [Parameter]
    public string TowerId { get; set; }

    [Parameter]
    public string UpgradeKey { get; set; }

    [CascadingParameter]
    public int DifficultySelected { get; set; }


    [Parameter]
    public EventCallback OnModalClose { get; set; }

    async Task CloseClicked()
    {
        await OnModalClose.InvokeAsync();
    }

}